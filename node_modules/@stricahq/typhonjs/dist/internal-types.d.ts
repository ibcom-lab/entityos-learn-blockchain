/// <reference types="node" />
import { Buffer } from "buffer";
import { CborTag } from "@stricahq/cbors";
import BigNumber from "bignumber.js";
import { CertificateType, HashType, WitnessType } from "./types";
export declare type TokenBundle = Record<string, // this is policy id
Array<{
    assetName: string;
    amount: BigNumber;
}>>;
export declare enum RedeemerTag {
    SPEND = 0,
    MINT = 1,
    CERT = 2,
    REWARD = 3
}
export declare type EncodedInput = [Buffer, number];
export declare type EncodedCollateralInput = [Buffer, number];
export declare type EncodedTokens = Map<Buffer, Map<Buffer, BigNumber>>;
export declare type EncodedAmount = BigNumber | [BigNumber, EncodedTokens];
export declare type EncodedOutput = [Buffer, EncodedAmount, Buffer?];
export declare type EncodedWithdrawals = Map<Buffer, BigNumber>;
export declare type EncodedStakeCredential = [HashType, Buffer];
export declare type EncodedStakeRegistrationCertificate = [
    CertificateType.STAKE_REGISTRATION,
    EncodedStakeCredential
];
export declare type EncodedStakeDeRegistrationCertificate = [
    CertificateType.STAKE_DE_REGISTRATION,
    EncodedStakeCredential
];
export declare type EncodedStakeDelegationCertificate = [
    CertificateType.STAKE_DELEGATION,
    EncodedStakeCredential,
    Buffer
];
export declare type EncodedCertificate = EncodedStakeRegistrationCertificate | EncodedStakeDeRegistrationCertificate | EncodedStakeDelegationCertificate;
export declare type EncodedExUnits = [number, number];
export declare type EncodedVKeyWitness = [Buffer, Buffer];
export declare type EncodedPlutusScript = Buffer;
export declare type EncodedPlutusData = number | BigNumber | Buffer | Array<EncodedPlutusData> | Map<EncodedPlutusData, EncodedPlutusData> | CborTag;
export declare type EncodedRedeemer = [number, number, EncodedPlutusData, EncodedExUnits];
export declare type EncodedWitnesses = Map<WitnessType.V_KEY_WITNESS, Array<EncodedVKeyWitness>> & Map<WitnessType.NATIVE_SCRIPT, Array<EncodedNativeScript>> & Map<WitnessType.PLUTUS_SCRIPT, Array<EncodedPlutusScript>> & Map<WitnessType.PLUTUS_DATA, Array<EncodedPlutusData>> & Map<WitnessType.REDEEMER, Array<EncodedRedeemer>>;
declare type NativeScriptPubKeyHash = [0, Buffer];
declare type NativeScriptAll = [1, Array<EncodedNativeScript>];
declare type NativeScriptAny = [2, Array<EncodedNativeScript>];
declare type NativeScriptNOfK = [3, number, Array<EncodedNativeScript>];
declare type NativeScriptInvalidBefore = [4, number];
declare type NativeScriptInvalidAfter = [5, number];
export declare type EncodedNativeScript = NativeScriptPubKeyHash | NativeScriptAll | NativeScriptAny | NativeScriptNOfK | NativeScriptInvalidBefore | NativeScriptInvalidAfter;
export {};
