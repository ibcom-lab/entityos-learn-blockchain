/*
	Create metadata and transaction data 
    Based on JSON data - ie from mydigitalstructure/entityos
*/

var mydigitalstructure = require('mydigitalstructure')
var _ = require('lodash')

module.exports =
{
	VERSION: '0.0.1',

	init: function (param)
	{
        mydigitalstructure.add(
            {
                name: 'blockchain-transaction-prepare',
                code: function ()
                {
                    mydigitalstructure.invoke('blockchain-transaction-prepare-get-source-data');   
                }	
            });		

		mydigitalstructure.add(
		{
			name: 'blockchain-transaction-prepare-get-source-data',
			code: function ()
			{
                var event = mydigitalstructure.get({scope: '_event'});

                if (event.sourceDataFileName != undefined)
                {
                    mydigitalstructure.invoke('util-get-from-file',
                    {
                        filename: event.sourceDataFileName,
                        onComplete: 'blockchain-transaction-prepare-process'
                    })
                }
            }	
		});		

        mydigitalstructure.add(
        {
            name: 'blockchain-transaction-prepare-process',
            code: function (param)
            {
                var event = mydigitalstructure.get({scope: '_event'});

                 var fileData = mydigitalstructure._util.param.get(param, 'fileData').value;

                event.sourceData = mydigitalstructure.invoke('util-as-object',
                {
                    rootObject: fileData,
                    reference: event.sourceNamespace
                });

                var headers =
                [
                    'Source Name',
                    'Source Code',
                    'Domain Name',
                    'Domain Code',
                    'Skill Name',
                    'Skill Code',
                    'Level Name',
                    'Level Code',
                    'Capacity Name',
                    'Capacity Code',
                    'Self Driven Skill URI',
                    'Source Reference',
                    'Notes',
                    'Notes 2',
                    'Notes 3'
                ];

                event.preparedData = [_.join(headers, ',')]

                var skillNumber = parseInt(event.skillNumberStart);
               
                _.each(event.sourceData, function (_sourceData, sd)
                {
                    //SOURCE

                    _sourceData._prepared = ['', event.sourceCode];
                    
                    _.each(_sourceData, function (_sourceDataValue, _sourceDataKey)
                    {
                        //console.log(_sourceDataKey);

                        if (event.sourceName == 'mq')
                        {
                            if (_sourceDataKey == 'data')
                            {
                                _sourceData[_sourceDataKey] = JSON.parse(_sourceDataValue);
                            }
                        }
                    });

                    //DOMAIN 
                        //map domains using "school"

                    _sourceData._domainCode = (_sourceData.code).substr(0, 4);
                    _sourceData._domainCodeMapping = event.domainCodeMapping[_sourceData._domainCode];

                    _sourceData._prepared.push(_sourceData._domainCodeMapping);
                    _sourceData._prepared.push(_sourceData._domainCodeMapping);

                    //SKILL

                    _sourceData._prepared.push(_sourceData.data.title);
                    _sourceData._prepared.push(_.padStart(skillNumber, 6, '0'));

                    //LEVEL
                        //use title - ie masters
                        //OR special_unit_level.value = ['postgrad', 'undergrad', 'research_master' ]
                        //event.levelCode is default

                    _sourceData.levelCode = event.levelCodeDefault;

                    //console.log(_.first(_sourceData.data.special_unit_type).value)

                    _sourceData._levelCodeMapping = event.levelCodeMapping[_.first(_sourceData.data.special_unit_type).value];

                    //console.log(_sourceData._levelCodeMapping)

                    if (_sourceData._levelCodeMapping != undefined)
                    {
                        _sourceData.levelCode = _sourceData._levelCodeMapping;
                    }

                    _sourceData._prepared.push(_sourceData.levelCode);
                    _sourceData._prepared.push(_sourceData.levelCode);

                    //CAPACITY
                        //event.capacityCode is default

                    _sourceData._prepared.push(event.capacityName);
                    _sourceData._prepared.push(event.capacityCode);

                    //URI
                    _sourceData._prepared.push(event.sourceCode + _sourceData._domainCodeMapping + _.padStart(skillNumber, 6, '0') + _sourceData.levelCode + event.capacityCode)

                    //SOURCE REFERENCE
                    _sourceData._prepared.push(_sourceData.data.code);

                    //NOTES
                    _sourceData._prepared.push(_sourceData.data.school.value + ' [' + _sourceData.data.cl_id + ']');

                    event.preparedData.push(_.join(_.map(_sourceData._prepared, function (prepared)
                    {
                        return '"' + prepared + '"'
                    }), ','));


                    skillNumber = skillNumber + 1
                });

                var fileData = _.join(event.preparedData, '\r\n');

                event.preparedDataFilename = event.sourceDataFileName.replace('.json', '-prepared.csv');

                mydigitalstructure.invoke('util-save-to-file',
                {
                    fileData: fileData,
                    saveAsJSON: false,
                    filename: event.preparedDataFilename,
                    onComplete: 'blockchain-transaction-prepare-complete'
                });
            }
        });

        mydigitalstructure.add(
        {
            name: 'blockchain-transaction-prepare-complete',
            code: function (param)
            {
                var event = mydigitalstructure.get({scope: '_event'});
                mydigitalstructure.invoke('util-end', event)
            }
        });
	}
}